treatment
posterior <- MCMCpoisson(counts ~ evenness + cellcount)
plot(posterior)
counts <- design$LMG7878
posterior <- MCMCpoisson(counts ~ evenness + cellcount)
plot(posterior)
counts <- design$LMG3203
posterior <- MCMCpoisson(counts ~ evenness + cellcount)
plot(posterior)
counts <- design$LMG2954
counts <- design$LMG2954
posterior <- MCMCpoisson(counts ~ evenness + cellcount)
plot(posterior)
posterior
counts <- design$LMG7878
posterior <- MCMCpoisson(counts ~ evenness + cellcount)
plot(posterior)
library("rjags")
theta <- 1.05 / 2.05
theta
theta/(1-theta)
births <- rbinom(n, prob = theta)
n <- 50
births <- rbinom(n, prob = theta)
births <- rbinom(n, 1, prob = theta)
births
length(births)
births <- rbinom(n, 3, prob = theta)
births
births <- rbinom(n, 1, prob = theta)
births
hist(births)
# Simulate IQ data
set.seed(66)
n <- 50
births <- rbinom(n, 1, prob = theta)
births
hist(births)
# Frequentist analysis
summary(lm(iq~1))
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy)
}
# Priors
births.boy <- dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Frequentist analysis
summary(lm(iq~1))
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy)
}
# Priors
births.boy <- dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5),list(births.boy=0),list(births.boy=1)),
n.chains = 3,
n.adapt = 1000)
set.seed(66)
n <- 100
iq <- round(rnorm(n=n,mean=100,sd=15))
hist(iq)
# Frequentist analysis
summary(lm(iq~1))
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
iq[i] ~ dnorm(pop.mean, pop.prec)
}
# Priors
pop.mean ~ dunif(0, 200)
pop.prec <- pow(pop.sd, -2)
pop.sd ~ dunif(0, 100)
}
"
model <- jags.model(textConnection(modelstring),
data=list('iq'=iq,'nobs'=n),
#inits=list(pop.mean=200,pop.sd=20),
inits=list(list(pop.mean=10,pop.sd=2),list(pop.mean=100,pop.sd=50),list(pop.mean=200,pop.sd=100)),
n.chains = 3,
n.adapt = 1000)
summary(lm(births~theta))
summary(lm(birth~1))
summary(lm(births~1))
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
iq[i] ~ dnorm(pop.mean, pop.prec)
}
# Priors
pop.mean ~ dunif(0, 200)
pop.prec <- pow(pop.sd, -2)
pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('iq'=iq,'nobs'=n),
#inits=list(pop.mean=200,pop.sd=20),
inits=list(list(pop.mean=10,pop.sd=2),list(pop.mean=100,pop.sd=50),list(pop.mean=200,pop.sd=100)),
n.chains = 3,
n.adapt = 1000)
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy)
}
# Priors
births.boy <- dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5),list(births.boy=0),list(births.boy=1)),
n.chains = 3,
n.adapt = 1000)
births <- rbinom(n, 1, prob = theta)
births
n <- 50
births <- rbinom(n, 1, prob = theta)
births
hist(births)
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy)
}
# Priors
births.boy <- dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5),list(births.boy=0),list(births.boy=1)),
n.chains = 3,
n.adapt = 1000)
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy)
}
# Priors
births.boy ~ dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5),list(births.boy=0),list(births.boy=1)),
n.chains = 3,
n.adapt = 1000)
?dbin
?dbinom
dbinom(1,1)
dbinom(.5,1)
dbinom(1,1,prob = .9)
dbinom(1,1,prob = .9)
dbinom(1,1,prob = .9)
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy, level)
}
# Priors
births.boy ~ dunif(0, 1)
level ~ dunif(0,1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5, level=1),list(births.boy=0, level =1),list(births.boy=1, level=1)),
n.chains = 3,
n.adapt = 1000)
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy, level)
}
# Priors
births.boy ~ dunif(0, 1)
level <- 1
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5, level=1),list(births.boy=0, level =1),list(births.boy=1, level=1)),
n.chains = 3,
n.adapt = 1000)
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy, level)
}
# Priors
births.boy ~ dunif(0, 1)
level <- 2
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5, level=1),list(births.boy=0, level =1),list(births.boy=1, level=1)),
n.chains = 3,
n.adapt = 1000)
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy) #, level)
}
# Priors
births.boy ~ dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5)),#list(births.boy=0),list(births.boy=1)),
n.chains = 1,
n.adapt = 1000)
N0 <- gl(2)
gl(2)
gl(2,2)
gl(2,1)
gl(1,1)
gl(2,1)-1
as.factor(c(0,1))
N0 <- as.factor(c(0,1))
library(MASS)
library(lmtest)
library(AER)
library(ggplot2)
library(reshape2)
require(foreign)
setwd("D:/univ/2014-2015/thesis/KERMIT/results february")
bacteria <- read.csv("design_results_febr_counts.csv")
pathogen <- bacteria$LMG7866
evenness <- bacteria$evenness
cellcount <- log10(bacteria$cellcount)
df <- data.frame(pathogen, evenness, cellcount)
# define loes function
lo <- function(x, y){
lo <- loess(y~x)
}
return(predict(lo)[order(x)])
test_df <- data.frame(LMG7866=bacteria$LMG7866, LMG3203=bacteria$LMG3203, LMG2954=bacteria$LMG2954,
LMG7878=bacteria$LMG7878, evenness=bacteria$evenness, cellcount=bacteria$cellcount)
test_df <- melt(test_df, id.vars=c("evenness", "cellcount"))
ggplot(test_df, aes(evenness, value, fill=variable)) + geom_point() +
facet_grid(variable~.)
ggplot(df, aes(x=pathogen)) + geom_histogram(binwidth=1) + xlab("Pathogen count") + ylab("Frequency")
#############################################################################################################
#############################################################################################################
# C L A S S I C     A P P R O A C H
#############################################################################################################
#############################################################################################################
## Poisson
model1 <- glm(pathogen~.,data=df, family = poisson())
model_nb <- glm.nb(pathogen ~ ., data=df)
summary(model_nb)
plot(pathogen~evenness)
preds <- predict(model_nb, type = "response", se.fit = TRUE)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit
lines(evenness[order(evenness)], lo(evenness, fit), col="red")
lines(evenness[order(evenness)], lo(evenness, upr))
smooth.fit <- lo(evenness, fit)
smooth.upr <- lo(evenness, upr)
smooth.lwr <- lo(evenness, lwr)
df.smooth <- data.frame(evenness, pathogen, smooth.fit, smooth.upr, smooth.lwr)
smooth.lwr <- lo(evenness, lwr)
smooth.upr <- lo(evenness, upr)
smooth.fit <- lo(evenness, fit)
df.smooth <- data.frame(evenness, pathogen, smooth.fit, smooth.upr, smooth.lwr)
smooth.fit <- lo(evenness, fit)$fitted
smooth.upr <- lo(evenness, upr)$fitted
smooth.lwr <- lo(evenness, lwr)$fitted
df.smooth <- data.frame(evenness, pathogen, smooth.fit, smooth.upr, smooth.lwr)
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen)) +
geom_line(aes(x=evenness, y=smooth.fit, colour = "red"), size = 2)
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen)) +
geom_line(aes(x=evenness, y=smooth.fit, colour = "Fit"), size = 2)
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen)) +
geom_line(aes(x=evenness, y=smooth.fit, colour = "Fit"), size = 2)
df.smooth <- melt(df.smooth, id.var="evenness")
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen)) +
geom_line(aes(x=evenness, y=smooth.fit, colour = "Fit"), size = 2)
df.smooth
head(df.smooth)
ggplot(df.smooth) + geom_point(aes(x=evenness, colour=pathogen))# +
ggplot(df.smooth) + geom_point(aes(x=evenness, colour="pathogen"))# +
ggplot(df.smooth) + geom_point(aes(x=evenness, y=value colour="pathogen"))# +
ggplot(df.smooth) + geom_point(aes(x=evenness, y=value colour=variable))# +
ggplot(df.smooth) + geom_point(aes(x=evenness, y=value, colour=variable))# +
ggplot(df.smooth) + geom_point(aes(x=evenness, y=value, colour=pathogen))# +
ggplot(df.smooth) + geom_point(aes(x=evenness, y=value, colour="pathogen))# +
ggplot(df.smooth) + geom_point(aes(x=evenness, y=value, colour="pathogen"))# +
ggplot(df.smooth) + geom_point(aes(x=evenness, y=value, colour="pathogen"))# +
df.smooth <- data.frame(evenness, pathogen, smooth.fit, smooth.upr, smooth.lwr)
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen))# +
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen)) +
geom_line(aes(x=evenness, y=smooth.fit, colour = "Fit"), size = 2)
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen)) +
geom_line(aes(x=evenness, y=smooth.fit, colour = "Fit"), size = 2) +
geom_ribbon(aes(ymin = smoothlwr, ymax = smooth.upr), alpha = .25)
geom_ribbon(aes(ymin = smooth.lwr, ymax = smooth.upr), alpha = .25)
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen)) +
geom_line(aes(x=evenness, y=smooth.fit, colour = "Fit"), size = 2) +
geom_ribbon(aes(ymin = smooth.lwr, ymax = smooth.upr), alpha = .25)
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen)) +
geom_line(aes(x=evenness, y=smooth.fit, colour = "Fit"), size = 2) +
geom_ribbon(aes(x=evenness, ymin = smooth.lwr, ymax = smooth.upr), alpha = .25)
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen)) +
geom_line(aes(x=evenness, y=smooth.fit, colour = "Fit"), size = 2) +
geom_ribbon(aes(x=evenness, ymin = smooth.lwr, ymax = smooth.upr, colour = "red"), alpha = .25)
ggplot(df.smooth) + geom_point(aes(x=evenness, y=pathogen)) +
geom_line(aes(x=evenness, y=smooth.fit, colour = "Fit"), size = 2) +
geom_ribbon(aes(x=evenness, ymin = smooth.lwr, ymax = smooth.upr, colour = "Confidence Interval"), alpha = .25)
plot(pathogen~evenness)
preds <- predict(model_nb, type = "response", se.fit = TRUE)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit
lines(evenness[order(evenness)], lo(evenness, fit), col="red")
lines(evenness[order(evenness)], lo(evenness, fit)$fitted, col="red")
lines(evenness[order(evenness)], lo(evenness, upr)$fitted)
lines(evenness[order(evenness)], lo(evenness, lwr)$fitted)
lines(evenness[order(evenness)], lo(evenness, fit), col="red")
model_nb <- glm.nb(pathogen ~ ., data=df)
summary(model_nb)
plot(pathogen~evenness)
preds <- predict(model_nb, type = "response", se.fit = TRUE)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit
lines(evenness[order(evenness)], lo(evenness, fit)$fitted, col="red")
lines(evenness[order(evenness)], lo(evenness, upr)$fitted)
lines(evenness[order(evenness)], lo(evenness, lwr)$fitted)
smooth.fit <- lo(evenness, fit)$fitted
lines(evenness[order(evenness)], smooth.fit, col="red")
model1 <- glm(pathogen~.,data=df, family = poisson())
summary(model1)
plot(pathogen~evenness)
preds <- predict(model1, type = "response", se.fit = TRUE)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit
lines(evenness[order(evenness)], lo(evenness, fit), col="red")
lines(evenness[order(evenness)], lo(evenness, upr))
lines(evenness[order(evenness)], lo(evenness, lwr))
confint(model1)
lo <- function(x, y){
lo <- loess(y~x)
return(predict(lo)$fitted[order(x)])
}
plot(pathogen~evenness)
preds <- predict(model1, type = "response", se.fit = TRUE)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit
lines(evenness[order(evenness)], lo(evenness, fit), col="red")
lines(evenness[order(evenness)], lo(evenness, upr))
function (x, y = NULL, xlab = NULL, ylab = NULL, log = NULL,
model_nb <- glm.nb(pathogen ~ ., data=df)
summary(model_nb)
plot(pathogen~evenness)
preds <- predict(model_nb, type = "response", se.fit = TRUE)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit
lines(evenness, fit)
lines(evenness, fit[order(evenness)])
lines(evenness[order(evenness)], fit[order(evenness)])
lines(evenness[order(evenness)], smooth.fit, col="red")
lines(evenness[order(evenness)], lo(evenness, upr)$fitted)
smooth.lwr <- lo(evenness, lwr)
# define loes function
lo <- function(x, y){
lo <- loess(y~x)
return(predict(lo, type="response")[order(x)])
}
plot(pathogen~evenness)
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit
preds <- predict(model1, type = "response", se.fit = TRUE)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit
lines(evenness[order(evenness)], lo(evenness, fit), col="red")
lines(evenness[order(evenness)], lo(evenness, upr))
lines(evenness[order(evenness)], lo(evenness, lwr))
confint(model1)
model_nb <- glm.nb(pathogen ~ ., data=df)
summary(model_nb)
plot(pathogen~evenness)
preds <- predict(model_nb, type = "response", se.fit = TRUE)
critval <- 1.96 ## approx 95% CI
upr <- preds$fit + (critval * preds$se.fit)
lwr <- preds$fit - (critval * preds$se.fit)
fit <- preds$fit
lines(evenness[order(evenness)], lo(evenness, fit), col="red")
lines(evenness[order(evenness)], lo(evenness, upr))
lines(evenness[order(evenness)], lo(evenness, lwr))
summary(model_nb)
jags.data <- list(N.cells = length(pathogen), evenness = evenness, cellcount = log10(cellcount),
counts = pathogen)
# Bayesian analysis with JAGS
modelstring <- "
model
{
# likelihood
for(i in 1:N.cells){
mu[i] <- beta0 + beta_evenness*evenness[i] + beta_cellcount*cellcount[i]
lambda[i] <- exp(mu[i])
p[i] <- abs(r/(r+lambda[i]))
# this part is here in order to make nice prediction curves:
counts[i] ~ dnegbin(p[i],r)
}
# priors
beta0 ~ dnorm(0,.001)
beta_evenness ~ dnorm(0,0.001)
beta_cellcount ~ dnorm(0,.001)
r ~ dunif(0,20)
}"
initial <- list(list(beta0=0,beta_evenness=-2, beta_cellcount=0, r =1),
list(beta0=0,beta_evenness=0, beta_cellcount=0, r =1),
list(beta0=0,beta_evenness=2, beta_cellcount=0, r =1))
params <- c("beta0", "beta_evenness", "beta_cellcount", "r")
jm <- jags.model(textConnection(modelstring), inits=initial,
data = jags.data,
n.chains = 3, n.adapt = 10000)
library(rjags)
params <- c("beta0", "beta_evenness", "beta_cellcount", "r")
jm <- jags.model(textConnection(modelstring), inits=initial,
data = jags.data,
n.chains = 3, n.adapt = 10000)
update(jm, 5000)
out <- coda.samples(jm,
variable.names=params[1:3],
n.iter=50000, thin= 1)
plot(out)
