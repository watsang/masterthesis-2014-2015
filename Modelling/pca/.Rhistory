dim(vol)
names(df) <- c('b1','b2','b3','b4','b5','b6','b7','b8','b9','b10','evenness','celaantal','gini_thas', 'gini_wittebolle','v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','c1','c2','c3','c4','c5','c6','c7','c8','c9','c10')
# decorrelate
par(mfrow = c(1,2))
cor(df$evenness, df$celaantal)
plot(df$evenness, df$celaantal, xlab="evenness", ylab="celaantal")
cor(df$gini_thas, df$celaantal)
plot(df$gini_thas, df$celaantal, xlab = "Gini_thas", ylab  = "celaantal")
cor(df$gini_wittebolle, df$celaantal)
plot(df$gini_wittebolle, df$celaantal, xlab = "gini_wittebolle", ylab  = "celaantal")
df <- df[log(df$celaantal, base = 10) < 6.4,]
hist(df$gini_thas)
hist(df$gini_wittebolle)
hist(df$evenness)
hist(log(df$celaantal, base = 10))
design <- as.data.frame(matrix(0, nrow =194, ncol = 34))
#filter op celaantal
# add 94 random samples
design[101:194,] <- df[1:94,]
hist(df[1:94,]$evenness, main = "", xlab = "", ylab ="")
plot(df[1:94,]$evenness, df[1:94,]$celaantal, main = "", xlab = "", ylab ="")
plot(df[1:94,]$gini_thas, df[1:94,]$celaantal, main = "", xlab = "", ylab ="")
plot(df[1:94,]$gini_wittebolle, df[1:94,]$celaantal, main = "", xlab = "", ylab ="")
# add 100 samples stratified
# 16 samples: high celcount and low evenness
df.sub <- df[log(df$celaantal, base = 10) > 6.2,]
design[1:16,] <- df.sub[order(df.sub$evenness)[1:16],]
# 8 samples: medium celcount and low evenness
df.sub <- df[(log(df$celaantal, base = 10) < 6.2) & (log(df$celaantal, base = 10) > 5.9),]
design[17:24,] <- df.sub[order(df.sub$evenness)[1:8],]
# 16 samples: low celcount and low evenness
df.sub <- df[(log(df$celaantal, base = 10) < 5.9),]
design[25:40,] <- df.sub[order(df.sub$evenness)[1:16],]
# 8 samples: high celcount and medium evenness
df.sub <- df[ (df$evenness < 0.55) & (df$evenness > 0.45),]
df.sub <- df.sub[ log(df.sub$celaantal, base = 10) > 6.2,]
design[41:48,] <- df.sub[1:8,]
# 4 samples: medium celcount and medium evenness
df.sub <- df[ (df$evenness < 0.55) & (df$evenness > 0.45),]
df.sub <- df.sub[ log(df.sub$celaantal, base = 10) < 6.2,]
df.sub <- df.sub[ log(df.sub$celaantal, base = 10) > 5.9,]
df.sub
design[49:52,] <- df.sub[1:4,]
# 8 samples: low celcount and medium evenness
df.sub <- df[ (df$evenness < 0.55) & (df$evenness > 0.45),]
plot(df.sub$evenness, df.sub$celaantal)
df.sub <- df.sub[ log(df.sub$celaantal, base = 10) < 5.9,]
df.sub
design[53:60,] <- df.sub[1:8,]
# 16 samples: high celcount and high evenness
df.sub <- df[log(df$celaantal, base = 10) > 6.2, ]
}
gini_Thas<-function(x,graph=F) {
x <- x[order(x, decreasing = T)]
n.sp<-length(x)
s<-sum(x)
z0<-1:n.sp*(s/n.sp)
z1<-cumsum(as.numeric(x))
if(graph) {
plot(z0,z1,xlim=c(0,s),ylim=c(0,s))
abline(c(0,1))
}
g<-mean(z1-z0)
g<-g/mean(z0)
return(g)
}
niveaus <- c(.4*10**(c(7, 6, 5, 4)), .8*10**(c(7, 6, 5, 4)))
simulations <- matrix(0, nrow = 1000000, ncol = 10)
evenness <- matrix(0, nrow = 1000000, ncol = 1)
celaantal <- matrix(0, nrow = 1000000, ncol = 1)
gini_thas <- rep(NA, 10^6)
gini_wittebolle <- rep(NA, 10^6)
set.seed(100)
for(i in 1:1000000){
datapoint <- sample(niveaus, 10, replace = TRUE)
simulations[i,] <- datapoint
verhouding <- datapoint/sum(datapoint)
evenness[i,] <- -sum(verhouding*log(verhouding, base = 10))
celaantal[i,] <- sum(datapoint)
gini_thas[i] <- gini_Thas(simulations[i,])
gini_wittebolle[i] <- gini_Wittebolle(simulations[i,])
}
for(i in 1:1000000){
datapoint <- sample(niveaus, 10, replace = TRUE)
simulations[i,] <- datapoint
verhouding <- datapoint/sum(datapoint)
evenness[i,] <- -sum(verhouding*log(verhouding, base = 10))
celaantal[i,] <- sum(datapoint)
gini_thas[i] <- gini_Thas(simulations[i,])
gini_wittebolle[i] <- gini_Wittebolle(simulations[i,])
}
set.seed(100)
for(i in 1:1000000){
datapoint <- sample(niveaus, 10, replace = TRUE)
simulations[i,] <- datapoint
verhouding <- datapoint/sum(datapoint)
evenness[i,] <- -sum(verhouding*log(verhouding, base = 10))
celaantal[i,] <- sum(datapoint)
gini_thas[i] <- gini_Thas(simulations[i,])
gini_wittebolle[i] <- gini_Wittebolle(simulations[i,])
}
df <- as.data.frame(cbind(simulations, evenness, celaantal, gini_thas, gini_wittebolle))
names(df) <- c('b1','b2','b3','b4','b5','b6','b7','b8','b9','b10','evenness','celaantal', 'gini_thas', 'gini_wittebolle')
head(df)
plot(df$evenness, df$celaantal, xlab="evenness", ylab="celaantal")
plot(df$evenness, df$gini_thas, xlab = "Pielou's evenness", ylab = "Gini_thas")
df <- df[log(df$celaantal, base = 10) < 7,]
df <- df[log(df$celaantal, base = 10) > 5.5,]
df <- unique(df)
concentrations <- 10^ceiling(log(df[,1:10], base = 10))
dim(df)
#########################
# Determine volume here #
#########################
# calculate the used volumes
string <- function(x,y=1,z=1)
{
as.numeric(substring(toString(x),y,z))*100
}
volumes <- as.data.frame(lapply(df[,1:10],FUN = function(x) {sapply(x,FUN=string)}))
# rowSums(volumes)
vol <- volumes/rowSums(volumes)*1500
#head(df[,1:10]/rowSums(volumes)*1500)
#head(vol)
df[,1:10] <- df[,1:10]/rowSums(volumes)*1500
df <- cbind(df, vol, concentrations)
df$celaantal <- rowSums(df[,1:10])
dim(df)
dim(vol)
names(df) <- c('b1','b2','b3','b4','b5','b6','b7','b8','b9','b10','evenness','celaantal','gini_thas', 'gini_wittebolle','v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','c1','c2','c3','c4','c5','c6','c7','c8','c9','c10')
# decorrelate
par(mfrow = c(1,2))
cor(df$evenness, df$celaantal)
plot(df$evenness, df$celaantal, xlab="evenness", ylab="celaantal")
df <- df[log(df$celaantal, base = 10) < 6.4,]
hist(df$gini_thas)
hist(df$gini_wittebolle)
hist(df$evenness)
design <- as.data.frame(matrix(0, nrow =194, ncol = 34))
design[101:194,] <- df[1:94,]
hist(df[1:94,]$evenness, main = "", xlab = "", ylab ="")
df.sub <- df[log(df$celaantal, base = 10) > 6.2,]
design[1:16,] <- df.sub[order(df.sub$evenness)[1:16],]
# 8 samples: medium celcount and low evenness
df.sub <- df[(log(df$celaantal, base = 10) < 6.2) & (log(df$celaantal, base = 10) > 5.9),]
design[17:24,] <- df.sub[order(df.sub$evenness)[1:8],]
# 16 samples: low celcount and low evenness
df.sub <- df[(log(df$celaantal, base = 10) < 5.9),]
design[25:40,] <- df.sub[order(df.sub$evenness)[1:16],]
# 8 samples: high celcount and medium evenness
df.sub <- df[ (df$evenness < 0.55) & (df$evenness > 0.45),]
df.sub <- df.sub[ log(df.sub$celaantal, base = 10) > 6.2,]
design[41:48,] <- df.sub[1:8,]
# 4 samples: medium celcount and medium evenness
df.sub <- df[ (df$evenness < 0.55) & (df$evenness > 0.45),]
df.sub <- df.sub[ log(df.sub$celaantal, base = 10) < 6.2,]
df.sub <- df.sub[ log(df.sub$celaantal, base = 10) > 5.9,]
df.sub
design[49:52,] <- df.sub[1:4,]
# 8 samples: low celcount and medium evenness
df.sub <- df[ (df$evenness < 0.55) & (df$evenness > 0.45),]
plot(df.sub$evenness, df.sub$celaantal)
df.sub <- df.sub[ log(df.sub$celaantal, base = 10) < 5.9,]
df.sub
design[53:60,] <- df.sub[1:8,]
# 16 samples: high celcount and high evenness
df.sub <- df[log(df$celaantal, base = 10) > 6.2, ]
design[61:76,] <- df.sub[order(df.sub$evenness, decreasing = T)[1:16],]
# 8 samples: medium celcount and high evenness
df.sub <- df[(log(df$celaantal, base = 10) < 6.2) & (log(df$celaantal, base = 10) > 5.9) , ]
design[77:84,] <- df.sub[order(df.sub$evenness, decreasing = T)[1:8],]
# 16 samples: low celcount and high evenness
df.sub <- df[(log(df$celaantal, base = 10)  < 5.9),]
design[85:100,] <- df.sub[order(df.sub$evenness, decreasing = T)[1:16],]
names(design) <- c('b1','b2','b3','b4','b5','b6','b7','b8','b9','b10','evenness','celaantal', 'gini_thas', 'gini_wittebolle', 'v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','c1','c2','c3','c4','c5','c6','c7','c8','c9','c10')
hist(design$evenness)
hist(design$gini_thas)
hist(design$gini_wittebolle)
hist(design[1:100,]$evenness)
hist(design[1:100,]$evenness)
hist(design[101:194,]$evenness)
hist(design[1:100,]$evenness, xlab = "evenness")
hist(design[101:194,]$evenness, xlab = "evenness")
hist(design[1:100,]$evenness, xlab = "evenness", main = "100 stratified data points")
hist(design[101:194,]$evenness, xlab = "94 random data points")
hist(design[1:100,]$evenness, xlab = "evenness", main = "100 stratified data points")
hist(design[101:194,]$evenness, xlab = "evenness", main = "94 random data points")
hist(design$celaantal)
par(mfrow = c(1,1))
hist(design$celaantal)
hist(design$evenness, xlab= "evenness", main = "final design")
install.packages("NMF")
library(NMFN)
?NMFN
source('http://bioconductor.org/biocLite.R')
library(BiocInstaller)
biocLite('NMF', siteRepos=c('http://web.cbio.uct.ac.za/~renaud/CRAN'), type='both')
library(NMF)
library("NMF")
# Define inputs
mu <- 0
sigma <- 0.2
dx <- .05
# Function for calculating the normal density
ddnorm <- function(x,mean,sd){
1/(sd*sqrt(2*pi)) * exp(-0.5*((x-mu)/sigma)^2)
}
# Calculate the normal density over a range of x values
x <- seq(-3*sigma,3*sigma,dx)
y <- ddnorm(x, mean=mu, sd=sigma)
# Plot the resuls
plot(x,y,typ="l",ylab="p(x)")
segments(x0=x, y0=0, x1=x, y1=y, col="blue")
# Integrate over different ranges of x
sum(dx*y)
sum(dx*y[x<=0])
sum(dx*y[x>0])
sum(dx*y[(x>-sigma)&(x<sigma)])
?qnorm
qnorm(.05)
qnorm(5)
qnorm(.5)
qnorm(1)
qnorm(.9)
qnorm(.05)
qnorm(.001)
qnorm(.00001)
qnorm(.1)
qnorm(0)
qnorm(9)
qnorm(.95)
qnorm(.05)
?dnorm
dnorm(.3)
dnorm(0)
dnorm(0.9)
dnorm(1)
dnorm(100)
x <- 0:.05:1
x
x <- 0:1
x
x <- 0:1:.05
x <- 0:.011:.05
x
x <- 1:10
x
x <- 1:.05:10
x
x <- 1:(.05):10
x
x <- 1.:(.05):10.
x
x <- 1.2:(.05):10.2
x <- 1:3:10
x <- seq(0,1,.05)
x
plot(x, qnorm(x))
x <- seq(-1.7, 1.7, .05)
plot(x, dnorm(x))
x <- seq(-2, 2, .05)
plot(x, dnorm(x))
plot(x, pnorm(x))
dnorm(0)
dnorm(1)
dnorm(1.8)
dnorm(100)
dnorm(10)
dnorm(5)
dnorm(-5)
pnorm(100)
pnorm(0)
pnorm(0.05)
pnorm(0.6)
pnorm(0.8)
pnorm(0.8)
pnorm(0.95)
dnorm(.95)
qnorm(0)
qnorm(.5)
qnorm(.95)
qnorm(.99999)
qnorm(.99999999999999999999)
design_results <- read.csv("~/univ/2014-2015/thesis/results december/design_results.csv")
View(design_results)
bacteria <- read.csv("~/univ/2014-2015/thesis/results december/design_results.csv")
bacteria <- read.csv("~/univ/2014-2015/thesis/results december/design_results.csv")
# bacteria$count <- ifelse(bacteria$count == +, 30, bacteria$count)
typeof(bacteria$count)
bacteria$count
summary(bacteria)
plot(log(celaantal)~evenness, bacteria, pch = 20)
model <- glm(count~ evenness+log(celaantal)+evenness:log(celaantal), data = bacteria, family = poisson())
summary(model)
model <- glm(count~ evenness+log(celaantal)+evenness:log(celaantal), data = bacteria, family = poisson())
View(design_results)
View(design_results)
bacteria$count
Gini.table_converted <- read.csv("~/univ/2014-2015/thesis/results december/Gini-table_converted.csv", header=FALSE)
View(Gini.table_converted)
typeof(bacteria$count)
bacteria$count
summary(bacteria)
plot(log(celaantal)~evenness, bacteria, pch = 20)
model <- glm(count~ evenness+log(celaantal)+evenness:log(celaantal), data = bacteria, family = poisson())
design_results_febr <- read.csv("~/univ/2014-2015/thesis/results december/design_results_febr.csv")
View(design_results_febr)
bacteria <- read.csv("~/univ/2014-2015/thesis/results december/design_results_febr.csv")
# bacteria$count <- ifelse(bacteria$count == +, 30, bacteria$count)
typeof(bacteria$count)
bacteria$count
bacteria <- read.csv("~/univ/2014-2015/thesis/results december/design_results_febr.csv")
# bacteria$count <- ifelse(bacteria$count == +, 30, bacteria$count)
typeof(bacteria$count)
bacteria$count
summary(bacteria)
bacteria$count
bacteria$count <- ifelse(bacteria$count == +, 30, bacteria$count)
typeof(bacteria$count)
bacteria$count
bacteria <- read.csv("~/univ/2014-2015/thesis/results december/design_results_febr.csv")
# bacteria$count <- ifelse(bacteria$count == +, 30, bacteria$count)
typeof(bacteria$count)
bacteria$count
bacteria <- read.csv("~/univ/2014-2015/thesis/results december/design_results_febr.csv")
# bacteria$count <- ifelse(bacteria$count == +, 30, bacteria$count)
typeof(bacteria$count)
bacteria$count
bacteria <- read.csv("~/univ/2014-2015/thesis/results december/design_results_febr.csv")
# bacteria$count <- ifelse(bacteria$count == +, 30, bacteria$count)
typeof(bacteria$count)
bacteria$count
design_results_febr <- read.csv("~/univ/2014-2015/thesis/results december/design_results_febr.csv", stringsAsFactors=FALSE)
View(design_results_febr)
bacteria <- read.csv("~/univ/2014-2015/thesis/results december/design_results_febr.csv", stringsAsFactors=FALSE)
# bacteria$count <- ifelse(bacteria$count == +, 30, bacteria$count)
typeof(bacteria$count)
bacteria$count
bacteria$CFU
bacteria$count
bacteria <- read.csv("~/univ/2014-2015/thesis/results december/design_results_febr.csv", stringsAsFactors=FALSE)
# bacteria$count <- ifelse(bacteria$count == +, 30, bacteria$count)
typeof(bacteria$count)
bacteria$count
summary(bacteria)
bacteria$CFU
plot(log(celaantal)~evenness, bacteria, pch = 20)
model <- glm(count~ evenness+log(celaantal)+evenness:log(celaantal), data = bacteria, family = poisson())
summary(model)
bacteria[bacteria$pathogen == "LMG7866",]
bacteria1 <- bacteria[bacteria$pathogen == "LMG7866",]
model <- glm(count~ evenness+log(celaantal)+evenness:log(celaantal), data = bacteria1, family = poisson())
summary(model)
model <- glm(count~ evenness+log(celaantal), data = bacteria1, family = poisson())
summary(model)
model <- glm(count~ evenness+log(CFU), data = bacteria1, family = poisson())
bacteria1$CFU
is.na(bacteria1$CFU)
is.inf(bacteria1$CFU)
?is.na
model <- glm(count~ evenness+log(CFU+1), data = bacteria1, family = poisson())
summary(model)
model <- glm(CFU+1~ evenness+log(celaantal), data = bacteria1, family = poisson())
summary(model)
bacteria1 <- bacteria[bacteria$pathogen == "LMG7866",]
bacteria2 <- bacteria[bacteria$pathogen == "LMG3203",]
bacteria3 <- bacteria[bacteria$pathogen == "LMG2954",]
bacteria4 <- bacteria[bacteria$pathogen == "LMG7878",]
plot(log(celaantal)~evenness, bacteria, pch = 20)
summary(model1)
model1 <- glm(CFU+1~ evenness+log(celaantal), data = bacteria1, family = poisson())
summary(model1)
model1 <- glm(CFU+1~ evenness+log(celaantal)+evenness:log(celaantal), data = bacteria1, family = poisson())
summary(model1)
model2 <- glm(CFU+1~ evenness+log(celaantal), data = bacteria2, family = poisson())
summary(model1)
model2 <- glm(CFU+1~ evenness+log(celaantal), data = bacteria2, family = poisson())
model3 <- glm(CFU+1~ evenness+log(celaantal), data = bacteria3, family = poisson())
model4 <- glm(CFU+1~ evenness+log(celaantal), data = bacteria4, family = poisson())
summary(model1)
summary(model2)
summary(model3)
summary(model4)
confint(model1)
plot(model1)
model1 <- glm(CFU+1~ evenness+log(celaantal)+evenness:log(celaantal), data = bacteria1, family = poisson())
model2 <- glm(CFU+1~ evenness+log(celaantal)+evenness:log(celaantal), data = bacteria2, family = poisson())
model3 <- glm(CFU+1~ evenness+log(celaantal)+evenness:log(celaantal), data = bacteria3, family = poisson())
model4 <- glm(CFU+1~ evenness+log(celaantal)+evenness:log(celaantal), data = bacteria4, family = poisson())
summary(model1)
summary(model2)
summary(model3)
bacteria$CFU
bacteria <- read.csv("~/univ/2014-2015/thesis/results february/design_results_febr_counts.csv")
bacteria$LMG7866 <- ifelse(bacteria$LMG7866 > 30, 30, bacteria$LMG7866)
bacteria$LMG3203 <- ifelse(bacteria$LMG3203 > 30, 30, bacteria$LMG3203)
bacteria$LMG2954 <- ifelse(bacteria$LMG2954 > 30, 30, bacteria$LMG2954)
bacteria$LMG7878 <- ifelse(bacteria$LMG7878 > 30, 30, bacteria$LMG7878)
typeof(bacteria$LMG7866)
bacteria$LMG7866
summary(bacteria)
plot(log10(celaantal)~evenness, bacteria, pch = 20)
model1 <- glm(LMG7866~ evenness+log10(celaantal)+evenness:log10(celaantal), data = bacteria, family = poisson())
model2 <- glm(LMG2954~ evenness+log10(celaantal)+evenness:log10(celaantal), data = bacteria, family = poisson())
model3 <- glm(LMG3203~ evenness+log10(celaantal)+evenness:log10(celaantal), data = bacteria, family = poisson())
model4 <- glm(LMG7878~ evenness+log10(celaantal)+evenness:log10(celaantal), data = bacteria, family = poisson())
summary(model1)
summary(model2)
summary(model3)
summary(model1)
summary(model4)
model1 <- glm(LMG7866~ evenness+log10(celaantal), data = bacteria, family = poisson())
model2 <- glm(LMG2954~ evenness+log10(celaantal), data = bacteria, family = poisson())
model3 <- glm(LMG3203~ evenness+log10(celaantal), data = bacteria, family = poisson())
summary(model1)
summary(model2)
summary(model3)
summary(model1)
summary(model2)
model1 <- glm(LMG7866~ evenness+log10(celaantal), data = bacteria, family = poisson())
summary(model1)
plot(model1)
par(mfrow = c(2,2))
plot(model1)
plot(model1)
plot(model2)
plot(model3)
plot(model4)
aov1 <- aov(LMG7866 ~ replica, data=bacteria)
aov2 <- aov(LMG3203 ~ replica, data=bacteria)
aov3 <- aov(LMG2954 ~ replica, data=bacteria)
aov4 <- aov(LMG7878 ~ replica, data=bacteria)
summary(aov1)
summary(aov2)
summary(aov3)
summary(aov4)
cor(bacteria)[16:19,]
cor(bacteria)[2:11,16:19]
cor(bacteria)[16:19,]
cor(bacteria)[16:19,]
signif(cor(bacteria)[16:19,], digits = 3)
signif(cor(bacteria)[16:19,], digits = 2)
signif(cor(bacteria)[2:11,16:19], digits = 2)
signif(cor(bacteria)[16:19,], digits = 2)
signif(cor(bacteria)[16:19,], digits = 2)
plot(bacteria$evenness, bacteria$LMG7866)
par(mfrow = c(1,1))
plot(bacteria$evenness, bacteria$LMG7866)
plot(bacteria$evenness, bacteria$LMG3203)
plot(bacteria$evenness, bacteria$LMG2954)
plot(bacteria$evenness, bacteria$LMG7878)
nThetaVals = 3
# Now make the vector of theta values:
Theta = seq( from = 1/(nThetaVals+1) , to = nThetaVals/(nThetaVals+1) ,
by = 1/(nThetaVals+1) )
Theta
3/7/7
fac(6)
fact(6)
faculty(6)
6!
(6!)
1/21
1/21/2
mod(5)
5%2
5 % 2
5 %/% 2
5 %/% 5
5 %/% 3
5 %/% 5
5 %/% 10
5 %/% 4
setwd("~/univ/2014-2015/thesis/KERMIT/bacterial similarity/data mining/pca")
`282458.4` <- read.delim("~/univ/2014-2015/thesis/KERMIT/bacterial similarity/data mining/pca/282458.4.txt")
View(`282458.4`)
df <- read.delim("~/univ/2014-2015/thesis/KERMIT/bacterial similarity/data mining/pca/282458.4.txt")
df
df.head()
head(df)
df
df[:,1]
names(df)
names(df)[0]
names(df)[1]
df$X
df.pca <- prcomp(df, center = T, scale = T)
df.pca <- prcomp(df[,2:], center = T, scale = T)
df[,-1]
size(df)
dim(df)
df[,2:1586]
df.pca <- prcomp(df[,2:1586], center = T, scale = T)
print(df.pca)
df.pca
plot(df.pca, type ="l")
summary(df.pca)
summary(df.pca)
plot(df.pca, type ="l")
df.pca
df.pca[0]
df.pca[1]
df.pca[2]
df.pca[2][1]
df.pca[2][,1]
dim(df.pca[2])
df.pca[2]
head(df.pca[2])
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("Rtools")
