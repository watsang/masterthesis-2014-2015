library(flowCore)
library(flowClust)
biocLite("flowClust")
source("http://bioconductor.org/biocLite.R")
biocLite("flowClust")
biocLite("flowClust")
biocLite("flowStats")
biocLite("flowViz")
library(flowClust)
library(flowStats)
library(flowViz)
library(lattice)
library(flowCore)
library(flowClust)
library(flowStats)
library(flowViz)
library(lattice)
library(RColorBrewer)
# Required for figures/color coding.
# Download these and all the other packages from CRAN.
library(rJava)
install.packages("rJava")
library(xlsxjars)
install.packages("xlsxjars")
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(rJava)
install.packages("rJava")
library(rJava)
library(flowCore)
library(flowClust)
library(flowStats)
library(flowViz)
library(lattice)
library(RColorBrewer)
# Required for figures/color coding.
# Download these and all the other packages from CRAN.
library(rJava)
install.packages("rJava")
library(rJava)
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava', repos='http://www.rforge.net/')
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
install.packages("rjags")
library(xlsxjars)
library(xlsx)
library(XLConnectJars)
install.packages("XLConnectJars")
install.packages("XLConnect")
library(XLConnectJars)
library(XLConnect)
# Required if you want to export results to an excel file.
library(KernSmooth)
library(MASS)
library(mvtnorm)
library(rgl)
library(ks)
# Required for kernel density estimation
library(RMTstat)
install.packages("RMTstat")
library(Cairo) # used for exporting anti-aliased figures.
myColours <- brewer.pal(6,"Blues")
my.settings <- list(
superpose.polygon=list(col=myColours[2:5], border="transparent"),
strip.background=list(col=myColours[6]),
strip.border=list(col="black", cex=5),
gate=list(col="green", fill="green", alpha=0.35)
)
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",
"#7FFF7F", "yellow", "#FF7F00", "red",
"#7F0000"))
# Input here your dilution factor and number of biological/technical replicates used.
# If no averaging/STDEV is required put nr_replicats = 1
Dilution_factor = 40
Dilution_factor = 40
nr_replicats = 4
library("rjags")
# Simulate IQ data
set.seed(66)
n <- 100
iq <- round(rnorm(n=n,mean=100,sd=15))
hist(iq)
# Frequentist analysis
summary(lm(iq~1))
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
iq[i] ~ dnorm(pop.mean, pop.prec)
}
# Priors
pop.mean ~ dunif(0, 200)
pop.prec <- pow(pop.sd, -2)
pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('iq'=iq,'nobs'=n),
#inits=list(pop.mean=200,pop.sd=20),
inits=list(list(pop.mean=10,pop.sd=2),list(pop.mean=100,pop.sd=50),list(pop.mean=200,pop.sd=100)),
n.chains = 3,
n.adapt = 1000)
# Update initial model
update(model, 1000)
# Run MCMC chain
out <- coda.samples(model,
variable.names=c('pop.mean', 'pop.sd'),
n.iter=1000)
# Diagnostics checks
xyplot(out) # traceplots
gelman.plot(out) # should be below 1.05 or 1.1
xyplot(out) # traceplots
gelman.plot(out) # should be below 1.05 or 1.1
geweke.plot(out) # should all be between -2 and 2
plot(out)
summary(out)
HPDinterval(out)
setwd("D:/univ/2014-2015/thesis/KERMIT/bacterial similarity/data mining/analysis 10 bacteria")
#setwd("~/univ/2014-2015/thesis/KERMIT/bacterial similarity/data mining/analysis 10 bacteria")
df_rhizobium <- read.csv("data 10 bacteria/394.7.txt")
df_agro <- read.csv("data 10 bacteria/176299.3.txt")
df_burkho <- read.csv("data 10 bacteria/269483.3.txt")
df_para <- read.csv("data 10 bacteria/318586.5.txt")
df_bacillus <- read.csv("data 10 bacteria/388400.4.txt")
# Change Lipid A disaccharide to Lipid A2
ModelSEED.compounds.db <- read.csv("ModelSEED-compounds-db.csv")
ModelSEED.reactions.db <- read.csv("ModelSEED-reactions-db.csv")
find_cp <- function(stoichiometric_matrix){
compound_names <- c()
for (compound in 1:nrow(stoichiometric_matrix))
{
compound_names <- c(compound_names, toString(subset(ModelSEED.compounds.db, DATABASE == toString(stoichiometric_matrix$X[compound]) )$PRIMARY.NAME) )
}
return(compound_names)
}
find_reaction <- function(stoichiometric_matrix){
reaction_names <- c()
for (reaction in 1:dim(stoichiometric_matrix)[2])
{
reaction_names <- c(reaction_names, toString(subset(ModelSEED.reactions.db, DATABASE == toString(names(stoichiometric_matrix)[reaction]))$NAME) )
}
return(reaction_names)
}
find_full_reaction <- function(stoichiometric_matrix){
reaction_names <- c()
for (reaction in 1:dim(stoichiometric_matrix)[2])
{
reaction_names <- c(reaction_names, toString(subset(ModelSEED.reactions.db, DATABASE == toString(names(stoichiometric_matrix)[reaction]))$NAME.EQ) )
}
return(reaction_names)
}
df_rhizo.NAME.EQ <- find_full_reaction(df_rhizobium[,2:dim(df_rhizobium)[2]])
df_agro.NAME.EQ <- find_full_reaction(df_agro[,2:dim(df_agro)[2]])
df_para.NAME.EQ <- find_full_reaction(df_para[,2:dim(df_para)[2]])
df_burkho.NAME.EQ <- find_full_reaction(df_burkho[,2:dim(df_burkho)[2]])
df_bacillus.NAME.EQ <- find_full_reaction(df_bacillus[,2:dim(df_bacillus)[2]])
names(df_rhizobium) <- c("X", find_reaction(df_rhizobium[,2:dim(df_rhizobium)[2]]))
names(df_agro) <- c("X", find_reaction(df_agro[,2:dim(df_agro)[2]]))
names(df_para) <- c("X", find_reaction(df_para[,2:dim(df_para)[2]]))
names(df_burkho) <- c("X", find_reaction(df_burkho[,2:dim(df_burkho)[2]]))
names(df_bacillus) <- c("X", find_reaction(df_bacillus[,2:dim(df_bacillus)[2]]))
df_rhizobium$X <- find_cp(df_rhizobium)
df_agro$X <- find_cp(df_agro)
df_burkho$X <- find_cp(df_burkho)
df_para$X <- find_cp(df_para)
df_bacillus$X <- find_cp(df_bacillus)
S_rhizo <- data.matrix( df_rhizobium[,2:dim(df_rhizobium)[2]] )
row.names(S_rhizo) <- df_rhizobium$X
S_agro <- data.matrix( df_agro[,2:dim(df_agro)[2]] )
row.names(S_agro) <- df_agro$X
S_burkho <- data.matrix( df_burkho[,2:dim(df_burkho)[2]] )
row.names(S_burkho) <- df_burkho$X
S_para <- data.matrix( df_para[,2:dim(df_para)[2]] )
row.names(S_para) <- df_para$X
S_bacillus <- data.matrix( df_bacillus[,2:dim(df_bacillus)[2]] )
row.names(S_bacillus) <- df_bacillus$X
row.names(S_bacillus)
library(dplyr)
library(gridExtra)
library(ggplot2)
names(df_rhizobium)
S_rhizo.svd <- svd( S_rhizo)
S_agro.svd <- svd( S_agro)
S_burkho.svd <- svd( S_burkho)
S_para.svd <- svd( S_para)
S_bacillus.svd <- svd( S_bacillus)
dim(S_rhizo)
row.names(S_rhizo)
d_rhizo <- S_rhizo.svd$d
d_para <- S_para.svd$d
d_burkho <- S_burkho.svd$d
d_bacillus <- S_bacillus.svd$d
d_agro <- S_agro.svd$d
d_rhizo1 <- d_rhizo[1] / sum(d_rhizo)
d_agro1 <- d_agro[1] / sum(d_agro)
d_bacillus1 <- d_bacillus[1] / sum(d_bacillus)
d_para1 <- d_para[1] / sum(d_para)
d_burkho1 <- d_burkho[1] / sum(d_burkho)
d_rhizo2 <- d_rhizo[2] / sum(d_rhizo)
d_agro2 <- d_agro[2] / sum(d_agro)
d_bacillus2 <- d_bacillus[2] / sum(d_bacillus)
d_para2 <- d_para[2] / sum(d_para)
d_burkho2 <- d_burkho[2] / sum(d_burkho)
d_rhizo[1]
S_rhizo.svd_eigenreaction <- S_rhizo.svd$u
S_rhizo.svd_eigenreaction <- cbind(as.data.frame(S_rhizo.svd_eigenreaction), compound_name = df_rhizobium$X)
p1_rhizo_U <- arrange(S_rhizo.svd_eigenreaction, desc(V1))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V1, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Rhizobium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse() + xlab("U1") +
geom_text(aes(.9, .5, label=paste("Proportional eigenvalue", round(d_rhizo1, digits = 4), sep =": ")))
p1_rhizo_U
S_agro.svd_eigenreaction <- S_agro.svd$u
S_agro.svd_eigenreaction <- cbind(as.data.frame(S_agro.svd_eigenreaction), compound_name = df_agro$X)
p1_agro_U <- arrange(S_agro.svd_eigenreaction, desc(V1))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V1, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("agrobium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse() + xlab("U1") +
geom_text(aes(.9, .5, label=paste("Proportional eigenvalue", round(d_agro1, digits = 4), sep =": ")))
p1_agro_U
S_para.svd_eigenreaction <- S_para.svd$u
S_para.svd_eigenreaction <- cbind(as.data.frame(S_para.svd_eigenreaction), compound_name = df_para$X)
p1_para_U <- arrange(S_para.svd_eigenreaction, desc(V1))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V1, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("parabium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse() + xlab("U1") +
geom_text(aes(.9, .5, label=paste("Proportional eigenvalue", round(d_para1, digits = 4), sep =": ")))
p1_para_U
S_bacillus.svd_eigenreaction <- S_bacillus.svd$u
S_bacillus.svd_eigenreaction <- cbind(as.data.frame(S_bacillus.svd_eigenreaction), compound_name = df_bacillus$X)
p1_bacillus_U <- arrange(S_bacillus.svd_eigenreaction, desc(V1))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V1, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("bacillusbium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse() + xlab("U1") +
geom_text(aes(.9, .5, label=paste("Proportional eigenvalue", round(d_bacillus1, digits = 4), sep =": ")))
p1_bacillus_U
S_burkho.svd_eigenreaction <- S_burkho.svd$u
S_burkho.svd_eigenreaction <- cbind(as.data.frame(S_burkho.svd_eigenreaction), compound_name = df_burkho$X)
p1_burkho_U <- arrange(S_burkho.svd_eigenreaction, desc(V1))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V1, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("burkhobium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse() + xlab("U1") +
geom_text(aes(.9, .5, label=paste("Proportional eigenvalue", round(d_burkho1, digits = 4), sep =": ")))
p1_burkho_U
grid.arrange(p1_burkho_U, p1_rhizo_U, p1_agro_U, p1_para_U, p1_bacillus_U, ncol = 5)
p2_rhizo_U <- arrange(S_rhizo.svd_eigenreaction, desc(V2))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V2, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Rhizobium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse() + xlab("U2") +
geom_text(aes(.9, .5, label=paste("Proportional eigenvalue", round(d_rhizo1, digits = 4), sep =": ")))
p2_rhizo_U
S_agro.svd_eigenreaction <- S_agro.svd$u
S_agro.svd_eigenreaction <- cbind(as.data.frame(S_agro.svd_eigenreaction), compound_name = df_agro$X)
p2_agro_U <- arrange(S_agro.svd_eigenreaction, desc(V2))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V2, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Agrobacterium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse() + xlab("U2") +
geom_text(aes(.9, .5, label=paste("Proportional eigenvalue", round(d_agro1, digits = 4), sep =": ")))
p2_agro_U
S_para.svd_eigenreaction <- S_para.svd$u
S_para.svd_eigenreaction <- cbind(as.data.frame(S_para.svd_eigenreaction), compound_name = df_para$X)
p2_para_U <- arrange(S_para.svd_eigenreaction, desc(V2))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V2, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Paracoccus") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse() + xlab("U2") +
geom_text(aes(.9, .5, label=paste("Proportional eigenvalue", round(d_para1, digits = 4), sep =": ")))
p2_para_U
S_bacillus.svd_eigenreaction <- S_bacillus.svd$u
S_bacillus.svd_eigenreaction <- cbind(as.data.frame(S_bacillus.svd_eigenreaction), compound_name = df_bacillus$X)
p2_bacillus_U <- arrange(S_bacillus.svd_eigenreaction, desc(V2))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V2, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Bacillus") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse() + xlab("U2") +
geom_text(aes(.9, .5, label=paste("Proportional eigenvalue", round(d_bacillus1, digits = 4), sep =": ")))
p2_bacillus_U
S_burkho.svd_eigenreaction <- S_burkho.svd$u
S_burkho.svd_eigenreaction <- cbind(as.data.frame(S_burkho.svd_eigenreaction), compound_name = df_burkho$X)
p2_burkho_U <- arrange(S_burkho.svd_eigenreaction, desc(V2))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V2, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Burkholderia ") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse() + xlab("U2") +
geom_text(aes(.9, .5, label=paste("Proportional eigenvalue", round(d_burkho1, digits = 4), sep =": ")))
p2_burkho_U
grid.arrange(p2_burkho_U, p2_rhizo_U, p2_agro_U, p2_para_U, p2_bacillus_U, ncol = 5)
p3_rhizo_U <- arrange(S_rhizo.svd_eigenreaction, desc(V3))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V3, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Rhizobium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) + xlab("U3") +
xlim(0,1) + scale_y_reverse()
S_agro.svd_eigenreaction <- S_agro.svd$u
S_agro.svd_eigenreaction <- cbind(as.data.frame(S_agro.svd_eigenreaction), compound_name = df_agro$X)
p3_agro_U <- arrange(S_agro.svd_eigenreaction, desc(V3))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V3, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Agrobacterium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + xlab("U3")
S_para.svd_eigenreaction <- S_para.svd$u
S_para.svd_eigenreaction <- cbind(as.data.frame(S_para.svd_eigenreaction), compound_name = df_para$X)
p3_para_U <- arrange(S_para.svd_eigenreaction, desc(V3))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V3, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Paracoccus") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + xlab("U3")
S_bacillus.svd_eigenreaction <- S_bacillus.svd$u
S_bacillus.svd_eigenreaction <- cbind(as.data.frame(S_bacillus.svd_eigenreaction), compound_name = df_bacillus$X)
p3_bacillus_U <- arrange(S_bacillus.svd_eigenreaction, desc(V3))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V3, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Bacillus") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + xlab("U3")
S_burkho.svd_eigenreaction <- S_burkho.svd$u
S_burkho.svd_eigenreaction <- cbind(as.data.frame(S_burkho.svd_eigenreaction), compound_name = df_burkho$X)
p3_burkho_U <- arrange(S_burkho.svd_eigenreaction, desc(V3))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V3, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Burkholderia") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + xlab("U3")
grid.arrange(p3_burkho_U, p3_rhizo_U, p3_agro_U, p3_para_U, p3_bacillus_U, ncol = 5)
p4_rhizo_U <- arrange(S_rhizo.svd_eigenreaction, desc(V4))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V4, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Rhizobium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + xlab("U4")
S_agro.svd_eigenreaction <- S_agro.svd$u
S_agro.svd_eigenreaction <- cbind(as.data.frame(S_agro.svd_eigenreaction), compound_name = df_agro$X)
p4_agro_U <- arrange(S_agro.svd_eigenreaction, desc(V4))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V4, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Agrobacterium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + xlab("U4")
S_para.svd_eigenreaction <- S_para.svd$u
S_para.svd_eigenreaction <- cbind(as.data.frame(S_para.svd_eigenreaction), compound_name = df_para$X)
p4_para_U <- arrange(S_para.svd_eigenreaction, desc(V4))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V4, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Paracoccus") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + xlab("U4")
S_bacillus.svd_eigenreaction <- S_bacillus.svd$u
S_bacillus.svd_eigenreaction <- cbind(as.data.frame(S_bacillus.svd_eigenreaction), compound_name = df_bacillus$X)
p4_bacillus_U <- arrange(S_bacillus.svd_eigenreaction, desc(V4))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V4, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Bacillus") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + xlab("U4")
S_burkho.svd_eigenreaction <- S_burkho.svd$u
S_burkho.svd_eigenreaction <- cbind(as.data.frame(S_burkho.svd_eigenreaction), compound_name = df_burkho$X)
p4_burkho_U <- arrange(S_burkho.svd_eigenreaction, desc(V4))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V4, y = index, label = compound_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Burkholderia") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + xlab("U4")
grid.arrange(p4_burkho_U, p4_rhizo_U, p4_agro_U, p4_para_U, p4_bacillus_U, ncol = 5)
grid.arrange(
p1_burkho_U, p1_rhizo_U, p1_agro_U, p1_para_U, p1_bacillus_U,
p2_burkho_U, p2_rhizo_U, p2_agro_U, p2_para_U, p2_bacillus_U,
p3_burkho_U, p3_rhizo_U, p3_agro_U, p3_para_U, p3_bacillus_U,
p4_burkho_U, p4_rhizo_U, p4_agro_U, p4_para_U, p4_bacillus_U, ncol = 5, nrow = 4)
# Create eigen connectivity plots
S_rhizo.svd_eigenconnect <- S_rhizo.svd$v
S_rhizo.svd_eigenconnect <- cbind(as.data.frame(S_rhizo.svd_eigenconnect), reaction_name =  names(df_rhizobium)[-1])
test <- as.data.frame(arrange(S_rhizo.svd_eigenconnect, desc(V1))[1:15,]$reaction_name)
names(test) <- c("reaction_name")
grid.arrange(p1_burkho_U, t, nrow =2)
#t <- tableGrob(test,  gpar.coretext =gpar(fontsize=8), gpar.coltext=gpar(fontsize=10, fontface='bold'))
#t
p1_rhizo_V <- arrange(S_rhizo.svd_eigenconnect, desc(V1))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V1, y = index, label = reaction_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Rhizobium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse() + scale_y_reverse()
p1_rhizo_V
S_agro.svd_eigenconnect <- S_agro.svd$v
S_agro.svd_eigenconnect <- cbind(as.data.frame(S_agro.svd_eigenconnect), reaction_name =  names(df_agro)[-1])
p1_agro_V <- arrange(S_agro.svd_eigenconnect, desc(V1))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V1, y = index, label = reaction_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Agrobacterium") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse()
S_para.svd_eigenconnect <- S_para.svd$v
S_para.svd_eigenconnect <- cbind(as.data.frame(S_para.svd_eigenconnect), reaction_name =  names(df_para)[-1])
p1_para_V <- arrange(S_para.svd_eigenconnect, desc(V1))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V1, y = index, label = reaction_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Paracoccus") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse()
S_bacillus.svd_eigenconnect <- S_bacillus.svd$v
S_bacillus.svd_eigenconnect <- cbind(as.data.frame(S_bacillus.svd_eigenconnect), reaction_name =  names(df_bacillus)[-1])
p1_bacillus_V <- arrange(S_bacillus.svd_eigenconnect, desc(V1))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V1, y = index, label = reaction_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Bacillus") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse()
S_burkho.svd_eigenconnect <- S_burkho.svd$v
S_burkho.svd_eigenconnect <- cbind(as.data.frame(S_burkho.svd_eigenconnect), reaction_name =  names(df_burkho)[-1])
p1_burkho_V <- arrange(S_burkho.svd_eigenconnect, desc(V1))[1:15,] %>%
mutate(index = 1:15) %>%
ggplot(aes(x = V1, y = index, label = reaction_name)) + geom_point() + geom_text(hjust = -.1) +
ggtitle("Burkholderia") + theme(plot.title = element_text(size=20, face="bold", vjust=2)) +
xlim(0,1) + scale_y_reverse()
grid.arrange(p1_burkho_V, p1_rhizo_V, p1_agro_V, p1_para_V, p1_bacillus_V, ncol = 5)
x <- seq(0, 1, .0001)
y <- - x * log(x)
df <- data.frame(x, y)
p <- ggplot(df, aes(x,y))
p <- p + layer(geom = "line") + labs(x = expression("Proportion p"["i"]*" of species i"),
y = expression("-p"["i"]*"ln(p"["i"]*")"))
p <- p +     theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, vjust=1)) + ggtitle("Element of evenness sum")
p <- p + scale_x_continuous(limits = c(0, 1)) + scale_y_continuous(limits = c(0, .4))
# +  ylab(expression("Proportion p"["i"]))
p
plot(p)
gini_Wittebolle <- function(vector)
{
N <- length(vector)
mu <- mean(vector)
yi <- vector[order(vector, decreasing = T)]
i <- 1:N
gini <- (N+1)/N - 2 / mu / N^2 * sum(yi *i)
return(gini)
}
x <- c(1, 1, 1, 1, 1)
x <- rep(100, 1)
x <- sample(niveaus, 10, replace = TRUE)
x
gini_Wittebolle(x)
gini_Thas<-function(x,graph=F) {
x <- x[order(x, decreasing = T)]
n.sp<-length(x)
s<-sum(x)
z0<-1:n.sp*(s/n.sp)
z1<-cumsum(as.numeric(x))
if(graph) {
plot(z0,z1,xlim=c(0,s),ylim=c(0,s))
abline(c(0,1))
}
g<-mean(z1-z0)
g<-g/mean(z0)
return(g)
}
niveaus <- c(.4*10**(c(7, 6, 5, 4)), .8*10**(c(7, 6, 5, 4)))
simulations <- matrix(0, nrow = 1000000, ncol = 10)
simulations <- as.data.frame(simulations)
evenness <- matrix(0, nrow = 1000000, ncol = 1)
celaantal <- matrix(0, nrow = 1000000, ncol = 1)
gini_thas <- rep(NA, 10^6)
gini_wittebolle <- rep(NA, 10^6)
set.seed(100)
for(i in 1:1000000){
datapoint <- sample(niveaus, 10, replace = TRUE)
simulations[i,] <- datapoint
verhouding <- datapoint/sum(datapoint)
evenness[i,] <- -sum(verhouding*log(verhouding, base = 10))
celaantal[i,] <- sum(datapoint)
gini_thas[i] <- gini_Thas(simulations[i,])
gini_wittebolle[i] <- gini_Wittebolle(simulations[i,])
}
gini_Wittebolle <- function(vector)
{
N <- length(vector)
mu <- mean(vector)
yi <- vector[order(vector, decreasing = T)]
i <- 1:N
gini <- (N+1)/N - 2 / mu / N^2 * sum(yi *i)
return(gini)
}
gini_Thas<-function(x,graph=F) {
x <- x[order(x, decreasing = T)]
n.sp<-length(x)
s<-sum(x)
z0<-1:n.sp*(s/n.sp)
z1<-cumsum(as.numeric(x))
if(graph) {
plot(z0,z1,xlim=c(0,s),ylim=c(0,s))
abline(c(0,1))
}
g<-mean(z1-z0)
g<-g/mean(z0)
return(g)
}
niveaus <- c(.4*10**(c(7, 6, 5, 4)), .8*10**(c(7, 6, 5, 4)))
simulations <- matrix(0, nrow = 1000000, ncol = 10)
simulations <- as.data.frame(simulations)
evenness <- matrix(0, nrow = 1000000, ncol = 1)
celaantal <- matrix(0, nrow = 1000000, ncol = 1)
gini_thas <- rep(NA, 10^6)
gini_wittebolle <- rep(NA, 10^6)
set.seed(100)
for(i in 1:1000000){
datapoint <- sample(niveaus, 10, replace = TRUE)
simulations[i,] <- datapoint
verhouding <- datapoint/sum(datapoint)
evenness[i,] <- -sum(verhouding*log(verhouding, base = 10))
celaantal[i,] <- sum(datapoint)
gini_thas[i] <- gini_Thas(simulations[i,])
gini_wittebolle[i] <- gini_Wittebolle(simulations[i,])
}
