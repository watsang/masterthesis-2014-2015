# Traceplot
plot(1:n, theta[1:n],pch=20, col=ugentblue, typ="b")
hist(theta[100:n])
plot(1:n, theta)
hist(theta[100:n])
dbinorm <- function(x, p1=.5, p2=1-p1, m1=-2, m2=2){
p1 * dnorm(x, m1) + p2 * dnorm(x, m2)
}
theta_draw <- runif(n=1, -2*sd, 2*sd)
f_draw <- runif(n = 1, 0, dnorm(theta_draw, mean = mu, sd = sd))
# Start slice sampling
for (i in 1:n)
{
# Draw new theta
theta_draw <- runif(n=1, -2*sd, 2*sd)
# If theta drawn is smaller than f-value, keep redrawing
while (dbinorm(theta_draw) < f_draw)
{
theta_draw <- runif(n=1, -2*sd, 2*sd)
}
# Renew f_draw for next iteration
f_draw <- runif(n = 1, 0, dnorm(theta_draw, mean = mu, sd = sd))
# Save theta_value
theta[i] <- theta_draw
}
ugentblue <- rgb (36,71,127,maxColorValue=250)
# Traceplot
plot(1:n, theta[1:n],pch=20, col=ugentblue, typ="b")
hist(theta[100:n])
plot(1:n, theta)
plot(1:n, theta[1:n],pch=20, col=ugentblue, typ="b")
plot(1:n, theta)
niveaus <- c(.4*10**(c(7, 6, 5, 4)), .8*10**(c(7, 6, 5, 4)))
simulations <- matrix(0, nrow = 1000000, ncol = 10)
simulations <- as.data.frame(simulations)
evenness <- matrix(0, nrow = 1000000, ncol = 1)
celaantal <- matrix(0, nrow = 1000000, ncol = 1)
set.seed(100)
for(i in 1:1000000){
datapoint <- sample(niveaus, 10, replace = TRUE)
simulations[i,] <- datapoint
verhouding <- datapoint/sum(datapoint)
evenness[i,] <- -sum(verhouding*log(verhouding, base = 10))
celaantal[i,] <- sum(datapoint)
# gini_thas[i] <- gini_Thas(simulations[i,])
# gini_wittebolle[i] <- gini_Wittebolle(simulations[i,])
}
df <- as.data.frame(cbind(simulations, evenness, celaantal, gini_thas, gini_wittebolle))
names(df) <- c('b1','b2','b3','b4','b5','b6','b7','b8','b9','b10','evenness','celaantal') # 'gini_thas', 'gini_wittebolle')
df <- as.data.frame(cbind(simulations, evenness, celaantal) # gini_thas, gini_wittebolle))
names(df) <- c('b1','b2','b3','b4','b5','b6','b7','b8','b9','b10','evenness','celaantal') # 'gini_thas', 'gini_wittebolle')
df <- as.data.frame(cbind(simulations, evenness, celaantal)) # gini_thas, gini_wittebolle))
names(df) <- c('b1','b2','b3','b4','b5','b6','b7','b8','b9','b10','evenness','celaantal') # 'gini_thas', 'gini_wittebolle')
head(df)
plot(df$evenness, df$celaantal, xlab="evenness", ylab="Cellcount")
plot(df$evenness, df$celaantal, xlab="Evenness", ylab="Cellcount")
plot(df$evenness, df$celaantal, xlab="Pielou's Evenness", ylab="Cellcount")
install.packages("MCMCpoisson")
library('MCMCpoisson')
library("MCMCpoisson")
library(MCMCpoisson)
install.packages(c("gdata", "gplots", "knitr", "manipulate", "markdown", "Rcpp", "RcppArmadillo", "rgl", "robCompositions", "stabledist", "stringr"))
install.packages("MCMCpack")
library("MCMCpack"))
library("MCMCpack")
?MCMCpoisson
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
posterior <- MCMCpoisson(counts ~ outcome + treatment)
plot(posterior)
plot(posterior)
summary(posterior)
library("MCMCpack")
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
posterior <- MCMCpoisson(counts ~ outcome + treatment)
plot(posterior)
summary(posterior)
design_results_febr_counts <- read.csv("D:/univ/2014-2015/thesis/KERMIT/results february/design_results_febr_counts.csv")
View(design_results_febr_counts)
design_results_febr_counts <- read.csv("D:/univ/2014-2015/thesis/KERMIT/results february/design_results_febr_counts.csv")
design <- read.csv("D:/univ/2014-2015/thesis/KERMIT/results february/design_results_febr_counts.csv")
design$LMG7866
counts <- design$LMG7866
outcome <- gl(3,1,9)
outcome
?gl
evenness <- design$evenness
cellcount <- design$cellcount
treatment <- gl(3,3)
treatment
treatment <- gl(3,3)
treatment
treatment <- gl(3,3)
treatment
posterior <- MCMCpoisson(counts ~ evenness + cellcount)
plot(posterior)
counts <- design$LMG7878
posterior <- MCMCpoisson(counts ~ evenness + cellcount)
plot(posterior)
counts <- design$LMG3203
posterior <- MCMCpoisson(counts ~ evenness + cellcount)
plot(posterior)
counts <- design$LMG2954
counts <- design$LMG2954
posterior <- MCMCpoisson(counts ~ evenness + cellcount)
plot(posterior)
posterior
counts <- design$LMG7878
posterior <- MCMCpoisson(counts ~ evenness + cellcount)
plot(posterior)
library("rjags")
theta <- 1.05 / 2.05
theta
theta/(1-theta)
births <- rbinom(n, prob = theta)
n <- 50
births <- rbinom(n, prob = theta)
births <- rbinom(n, 1, prob = theta)
births
length(births)
births <- rbinom(n, 3, prob = theta)
births
births <- rbinom(n, 1, prob = theta)
births
hist(births)
# Simulate IQ data
set.seed(66)
n <- 50
births <- rbinom(n, 1, prob = theta)
births
hist(births)
# Frequentist analysis
summary(lm(iq~1))
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy)
}
# Priors
births.boy <- dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Frequentist analysis
summary(lm(iq~1))
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy)
}
# Priors
births.boy <- dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5),list(births.boy=0),list(births.boy=1)),
n.chains = 3,
n.adapt = 1000)
set.seed(66)
n <- 100
iq <- round(rnorm(n=n,mean=100,sd=15))
hist(iq)
# Frequentist analysis
summary(lm(iq~1))
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
iq[i] ~ dnorm(pop.mean, pop.prec)
}
# Priors
pop.mean ~ dunif(0, 200)
pop.prec <- pow(pop.sd, -2)
pop.sd ~ dunif(0, 100)
}
"
model <- jags.model(textConnection(modelstring),
data=list('iq'=iq,'nobs'=n),
#inits=list(pop.mean=200,pop.sd=20),
inits=list(list(pop.mean=10,pop.sd=2),list(pop.mean=100,pop.sd=50),list(pop.mean=200,pop.sd=100)),
n.chains = 3,
n.adapt = 1000)
summary(lm(births~theta))
summary(lm(birth~1))
summary(lm(births~1))
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
iq[i] ~ dnorm(pop.mean, pop.prec)
}
# Priors
pop.mean ~ dunif(0, 200)
pop.prec <- pow(pop.sd, -2)
pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('iq'=iq,'nobs'=n),
#inits=list(pop.mean=200,pop.sd=20),
inits=list(list(pop.mean=10,pop.sd=2),list(pop.mean=100,pop.sd=50),list(pop.mean=200,pop.sd=100)),
n.chains = 3,
n.adapt = 1000)
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy)
}
# Priors
births.boy <- dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5),list(births.boy=0),list(births.boy=1)),
n.chains = 3,
n.adapt = 1000)
births <- rbinom(n, 1, prob = theta)
births
n <- 50
births <- rbinom(n, 1, prob = theta)
births
hist(births)
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy)
}
# Priors
births.boy <- dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5),list(births.boy=0),list(births.boy=1)),
n.chains = 3,
n.adapt = 1000)
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy)
}
# Priors
births.boy ~ dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5),list(births.boy=0),list(births.boy=1)),
n.chains = 3,
n.adapt = 1000)
?dbin
?dbinom
dbinom(1,1)
dbinom(.5,1)
dbinom(1,1,prob = .9)
dbinom(1,1,prob = .9)
dbinom(1,1,prob = .9)
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy, level)
}
# Priors
births.boy ~ dunif(0, 1)
level ~ dunif(0,1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5, level=1),list(births.boy=0, level =1),list(births.boy=1, level=1)),
n.chains = 3,
n.adapt = 1000)
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy, level)
}
# Priors
births.boy ~ dunif(0, 1)
level <- 1
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5, level=1),list(births.boy=0, level =1),list(births.boy=1, level=1)),
n.chains = 3,
n.adapt = 1000)
# Bayesian analysis with JAGS
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy, level)
}
# Priors
births.boy ~ dunif(0, 1)
level <- 2
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5, level=1),list(births.boy=0, level =1),list(births.boy=1, level=1)),
n.chains = 3,
n.adapt = 1000)
modelstring <- "
model{
# Likelihood
for (i in 1:nobs){
births[i] ~ dbin(births.boy) #, level)
}
# Priors
births.boy ~ dunif(0, 1)
#   pop.mean ~ dunif(0, 200)
#   pop.prec <- pow(pop.sd, -2)
#   pop.sd ~ dunif(0, 100)
}
"
# Initiate the model
model <- jags.model(textConnection(modelstring),
data=list('births'=births,'nobs'=n),
#inits=list(births.boy=.5),
inits=list(list(births.boy=.5)),#list(births.boy=0),list(births.boy=1)),
n.chains = 1,
n.adapt = 1000)
N0 <- gl(2)
gl(2)
gl(2,2)
gl(2,1)
gl(1,1)
gl(2,1)-1
as.factor(c(0,1))
N0 <- as.factor(c(0,1))
install.packages("hglm")
?hglm
data(cars)
head(cars)
cars
?data
data(airmiles)
head(airmiles)
airmiles
data(iris)
head(iris)
corr(data=iris, Sepal.Length~.)
cor(data=iris, Sepal.Length~.)
cor(iris$Sepal.Length~.)
cor(iris$Sepal.Length)
cor(iris)
cor(iris[,1:4])
niveaus <- c(.4*10**(c(7, 6, 5, 4)), .8*10**(c(7, 6, 5, 4)))
simulations <- matrix(0, nrow = 1000000, ncol = 10)
simulations <- as.data.frame(simulations)
evenness <- matrix(0, nrow = 1000000, ncol = 1)
celaantal <- matrix(0, nrow = 1000000, ncol = 1)
set.seed(100)
for(i in 1:1000000){
datapoint <- sample(niveaus, 10, replace = TRUE)
simulations[i,] <- datapoint
verhouding <- datapoint/sum(datapoint)
evenness[i,] <- -sum(verhouding*log(verhouding, base = 10))
celaantal[i,] <- sum(datapoint)
# gini_thas[i] <- gini_Thas(simulations[i,])
# gini_wittebolle[i] <- gini_Wittebolle(simulations[i,])
}
library(MASS)
library(lmtest)
library(AER)
library(ggplot2)
library(reshape2)
require(foreign)
setwd("D:/univ/2014-2015/thesis/KERMIT/results february")
LMG7866 <- bacteria$LMG7866
LMG7878 <- bacteria$LMG7878
LMG3203 <- bacteria$LMG3203
LMG2954 <- bacteria$LMG2954
evenness <- bacteria$evenness
cellcount <- log10(bacteria$cellcount)
df <- data.frame(evenness, cellcount, LMG7866, LMG7878, LMG3203, LMG2954)
bacteria$cellcount
setwd("D:/univ/2014-2015/thesis/KERMIT/results february")
setwd("D:\Github\masterthesis-2014-2015\Labwork\Statistical Analysis")
setwd("D:\Github\masterthesis-2014-2015\Labwork\Statistical Analysis")
setwd("D:/Github/masterthesis-2014-2015/Labwork/Statistical Analysis")
bacteria <- read.csv("design_results_febr_counts.csv")
LMG7866 <- bacteria$LMG7866
LMG7878 <- bacteria$LMG7878
LMG3203 <- bacteria$LMG3203
LMG2954 <- bacteria$LMG2954
evenness <- bacteria$evenness
cellcount <- log10(bacteria$cellcount)
df <- data.frame(evenness, cellcount, LMG7866, LMG7878, LMG3203, LMG2954)
# define loes function
lo <- function(x, y){
lo <- loess(y~x)
return(predict(lo, type="response")[order(x)])
}
df2 <- melt(df, id.vars=c("evenness", "cellcount"))
head(df2)
ggplot(df2, aes(x=value, fill=variable)) + geom_histogram(binwidth=1.25) +
facet_grid(variable~.) + xlab("Pathogen count") + ylab("Frequency") +
theme(axis.text.x = element_text(hjust = 1), axis.text.y = element_text(hjust = 1.5)) +
theme_set(theme_grey(base_size = 20))
test_df <- data.frame(LMG7866=bacteria$LMG7866, LMG3203=bacteria$LMG3203, LMG2954=bacteria$LMG2954,
LMG7878=bacteria$LMG7878, evenness=bacteria$evenness, cellcount=bacteria$cellcount)
test_df <- melt(test_df, id.vars=c("evenness", "cellcount"))
#ggplot(test_df, aes(evenness, value, fill=variable)) + geom_point() +
# facet_grid(variable~.)
ggplot(df, aes(x=LMG7866)) + geom_histogram(binwidth=1) + xlab("Pathogen count") + ylab("Frequency") +
theme_set(theme_grey(base_size = 30))
df
#############################################################################################################
#############################################################################################################
# C L A S S I C     A P P R O A C H
#############################################################################################################
#############################################################################################################
## Poisson
model1 <- glm(pathogen~.,data=df, family = poisson())
model1 <- glm(LMG7866~.,data=df, family = poisson())
summary(model1)
model1 <- glm(LMG7866~evenness+log10(cellcount) +evenness:log10(cellcount),data=df, family = poisson())
summary(model1)
model1 <- glm(LMG7866~evenness+log10(cellcount) +evenness:log10(cellcount),data=df, family = poisson())
model2 <- glm(LMG7878~evenness+log10(cellcount) +evenness:log10(cellcount),data=df, family = poisson())
model3 <- glm(LMG3203~evenness+log10(cellcount) +evenness:log10(cellcount),data=df, family = poisson())
model4 <- glm(LMG2954~evenness+log10(cellcount) +evenness:log10(cellcount),data=df, family = poisson())
summary(model1)
summary(model2)
summary(model4)
summary(model3)
summary(model2)
model1 <- glm(LMG7866~ evenness+log10(cellcount), data = bacteria, family = poisson())
model2 <- glm(LMG2954~ evenness+log10(cellcount), data = bacteria, family = poisson())
model3 <- glm(LMG3203~ evenness+log10(cellcount), data = bacteria, family = poisson())
# => C H E C K  F O R  O V E R D I S P E R S I O N
dispersiontest(model1) # overdispersed...
dispersiontest(model2) # overdispersed...
dispersiontest(model3) # overdispersed...
?dispersiontest
dispersiontest(model1, trafo=2) # overdispersed...
dispersiontest(model2, trafo=2) # overdispersed...
dispersiontest(model3, trafo=2) # overdispersed...
model1 <- glm.nb(LMG7866~ evenness+log10(cellcount)+evenness:log10(cellcount), data = bacteria)
model2 <- glm.nb(LMG2954~ evenness+log10(cellcount)+evenness:log10(cellcount), data = bacteria)
model3 <- glm.nb(LMG3203~ evenness+log10(cellcount)+evenness:log10(cellcount), data = bacteria)
summary(model1)
summary(model2)
summary(model3)
model1 <- glm.nb(LMG7866~ evenness+log10(cellcount), data = bacteria)
model2 <- glm.nb(LMG2954~ evenness+log10(cellcount), data = bacteria)
model3 <- glm.nb(LMG3203~ evenness+log10(cellcount), data = bacteria)
model1 <- glm.nb(LMG7866~ evenness+log10(cellcount), data = bacteria)
summary(model1)
summary(model2)
summary(model3)
par(mfrow = c(2,2))
plot(model1)
plot(model2)
plot(model3)
